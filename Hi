import React, { useState, useCallback, useEffect } from 'react'
import "./BookDemo.css"
import tick from "../assets/Ticks.svg"
import grdp from "../assets/1.svg"
import soc from "../assets/2.svg"
import iso from "../assets/3.svg"
import zoom from "../assets/zoom.svg"
import reuters from "../assets/reuters.svg"
import heineken from "../assets/heineken.svg"
import logo from "../assets/NexaStack.svg"
import arrow from "../assets/Vector.svg"
import "../Pages/Button.css"
import styled from "styled-components";
import ProgressBar from '../Components/ProgressBar'

const StyledSpan = styled.span`
  color: red;
`;

const QuestionWrapper = styled.div`
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.5s ease, transform 0.5s ease;
  
  &.visible {
    opacity: 1;
    transform: translateY(0);
  }
`;

const questionsData = [
    // ... (your existing questionsData array)
];

const BookDemo = () => {
    const [selectedAnswers, setSelectedAnswers] = useState({});
    const [currentStep, setCurrentStep] = useState(1);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [pendingAnswer, setPendingAnswer] = useState(null);
    const [isLastQuestionAnswered, setIsLastQuestionAnswered] = useState(false);
    const [loading, setLoading] = useState(false);
    const [isQuestionVisible, setIsQuestionVisible] = useState(false);

    useEffect(() => {
        // Add a small delay to trigger the animation
        const timer = setTimeout(() => {
            setIsQuestionVisible(true);
        }, 100);

        // Reset visibility when question changes
        return () => {
            clearTimeout(timer);
            setIsQuestionVisible(false);
        };
    }, [currentQuestionIndex]);

    const handleAnswer = useCallback((questionId, option) => {
        // Fade out current question
        setIsQuestionVisible(false);

        setPendingAnswer({ questionId, option });
        setLoading(false)

        setTimeout(() => {
            setSelectedAnswers((prev) => ({
                ...prev,
                [questionId]: option
            }));

            setPendingAnswer(null);
            setLoading(true)

            if (currentQuestionIndex < questionsData.length - 1) {
                // Move to next question
                setCurrentQuestionIndex(prev => prev + 1);
            }
            else if (currentQuestionIndex === questionsData.length - 1) {
                setIsLastQuestionAnswered(true);
            }

            // Trigger new question animation
            setIsQuestionVisible(true);
        }, 500);
    }, [currentQuestionIndex]);

    // ... (rest of your existing code remains the same)

    return (
        <div className='w-full md:flex md:flex-row flex-col justify-between mx-auto h-screen font-inter overflow-x-hidden'>
            {/* ... (previous left container code) */}
            
            {currentStep === 1 && (
                <div>
                    {/* ... (previous progress bar and other elements) */}
                    
                    <QuestionWrapper 
                        key={questionsData[currentQuestionIndex].id} 
                        className={`mb-6 flex flex-col ${isQuestionVisible ? 'visible' : ''}`}
                    >
                        <h2 className="text-sm md:text-xl font-semibold mb-2 text-start ml-6 md:ml-12 text-[22px] text-[#000000]">
                            {questionsData[currentQuestionIndex].text} <StyledSpan>*</StyledSpan>
                        </h2>
                        <div className="flex flex-wrap gap-5 md:gap-6 md:gap-y-8 mx-4 md:ml-12 my-6 md:text-[15px]">
                            {questionsData[currentQuestionIndex].options.map((option, index) => (
                                <button
                                    key={option}
                                    className={`px-4 py-2 md:px-8 md:py-3 rounded-full border font-normal text-sm
                                    ${selectedAnswers[questionsData[currentQuestionIndex].id] === option ? "bg-blue-500 text-white" :
                                        pendingAnswer && pendingAnswer.option === option ? "bg-blue-500 text-white" :
                                        "bg-[#F6F6F6]"}`}
                                    style={{
                                        transitionDelay: `${index * 100}ms`,
                                        transition: 'all 0.3s ease',
                                        opacity: isQuestionVisible ? 1 : 0,
                                        transform: isQuestionVisible ? 'translateY(0)' : 'translateY(20px)'
                                    }}
                                    onClick={() => handleAnswer(questionsData[currentQuestionIndex].id, option)}
                                    disabled={pendingAnswer !== null}
                                >
                                    {option}
                                </button>
                            ))}
                        </div>
                    </QuestionWrapper>
                    
                    {/* ... (rest of the existing code) */}
                </div>
            )}
        </div>
    );
};

export default BookDemo;
